# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Get PR info
        id: get_pr_info
        run: |
          echo "PR Message github.repository: ${{ github.repository }}"
          curl -s https://api.github.com/repos/${{ github.repository }}/commits?per_page=1 -o commit0
          LAST_COMMIT_URL=`jq -r '.[0].url' commit0`
          echo $LAST_COMMIT_URL
          curl -s $LAST_COMMIT_URL -o commit0-content
          FILENAME=`jq -r '.files[0].filename' commit0-content`
          if echo $file | grep -q -E '\.kimi$'
          then
            echo "filename=kimi" >> $GITHUB_OUTPUT
          fi
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ steps.get_pr_info.outputs.filename != 'kimi' }}
      - name: Setup Pages
        uses: actions/configure-pages@v5
        if: ${{ steps.get_pr_info.outputs.filename != 'kimi' }}
      - name: Update links
        id: update_links
        if: ${{ steps.get_pr_info.outputs.filename != 'kimi' }}
        run: |
          file="${{ steps.get_pr_info.outputs.filename }}"
          echo $file
          if echo $file | grep -q -E '\.html$'
          then
            ori_url=`head -n 3 "$file"|tail -n 1`
            ori_url=${ori_url:6}
            echo $ori_url
            name=${file/\.\//}
            name=${name/书签工具栏/}
            name=${name/(*).html/}
            pip3 install --upgrade 'openai>=1.0'
            touch "./${file}.kimi"
            ls -l "./${file}.kimi"
            python3 ./web_deploy/kimi.py "$name" ${{ secrets.MOONSHOT_API_KEY }} > "./${file}.kimi"
            git add "./${file}.kimi"
            git config --local user.email "github-actions[kimi]@users.noreply.github.com"
            git config --local user.name "github-actions[kimi]"
            git commit -m "./${file}.kimi"
            echo "hasChange=true" >> $GITHUB_OUTPUT
          fi
          bash ./web_deploy/ls.sh;cat index.html
      - name: Push kimi
        uses: ad-m/github-push-action@master
        if: ${{ steps.update_links.outputs.hasChange == 'true' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        if: ${{ steps.get_pr_info.outputs.filename != 'kimi' }}
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        if: ${{ steps.get_pr_info.outputs.filename != 'kimi' }}
